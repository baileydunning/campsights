name: Performance

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  server:
    outputs:
      mean_latency: ${{ steps.artillery.outputs.mean_latency }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install backend dependencies
        run: npm ci

      - name: Build backend
        run: npm run build

      - name: Start backend
        run: npm start &

      - name: Wait for backend health endpoint
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:3000/health; then
              echo "Backend is up!"; exit 0;
            fi
            sleep 2
          done
          echo "Backend did not start in time"; exit 1

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run Artillery load test
        run: |
          echo 'config:\n  target: "http://localhost:3000"\n  phases:\n    - duration: 10\n      arrivalRate: 10\nscenarios:\n  - flow:\n      - get:\n          url: "/api/v1/campsites"' > artillery.yml
          artillery run --output artillery-report.json artillery.yml

      - name: Extract mean latency from Artillery report
        id: artillery
        run: |
          mean_latency=$(jq '.aggregate.latency.mean' artillery-report.json)
          echo "mean_latency=$mean_latency" >> $GITHUB_OUTPUT

      - name: Upload Artillery report
        uses: actions/upload-artifact@v4
        with:
          name: artillery-report
          path: packages/server/artillery-report.json

  client:
    runs-on: ubuntu-latest
    needs: server
    defaults:
      run:
        working-directory: packages/client
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Start frontend
        run: npm run preview &

      - name: Wait for frontend
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:4173; then
              echo "Frontend is up!"; exit 0;
            fi
            sleep 2
          done
          echo "Frontend did not start in time"; exit 1

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: lhci autorun --collect.url=http://localhost:4173 --upload.target=filesystem --upload.outputDir=lhci-report

      - name: Extract Lighthouse scores
        id: lighthouse
        run: |
          perf=$(jq '.categories.performance.score' lhci-report/manifest.json | head -n1)
          acc=$(jq '.categories.accessibility.score' lhci-report/manifest.json | head -n1)
          best=$(jq '.categories."best-practices".score' lhci-report/manifest.json | head -n1)
          seo=$(jq '.categories.seo.score' lhci-report/manifest.json | head -n1)
          echo "perf=$perf" >> $GITHUB_OUTPUT
          echo "acc=$acc" >> $GITHUB_OUTPUT
          echo "best=$best" >> $GITHUB_OUTPUT
          echo "seo=$seo" >> $GITHUB_OUTPUT

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lhci-report
          path: packages/client/lhci-report

      - name: Post or update PR comment with results
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: performance-lighthouse
          message: |
            ## :rocket: Performance & Lighthouse Results
            **Backend mean latency:** ${{ needs.server.outputs.mean_latency }} ms
            **Lighthouse scores:**
            - Performance: ${{ steps.lighthouse.outputs.perf }}
            - Accessibility: ${{ steps.lighthouse.outputs.acc }}
            - Best Practices: ${{ steps.lighthouse.outputs.best }}
            - SEO: ${{ steps.lighthouse.outputs.seo }}
